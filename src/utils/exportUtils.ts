import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { ComparisonResult, ComplianceMetrics } from '../types';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';

export function generateFileName(type: 'excel' | 'pdf', supplierName?: string, prefix: string = 'verification-codes-barres'): string {
  const timestamp = format(new Date(), 'yyyy-MM-dd_HH-mm', { locale: fr });
  const supplier = supplierName ? `_${supplierName.replace(/[^a-zA-Z0-9]/g, '_')}` : '';
  const extension = type === 'excel' ? 'xlsx' : 'pdf';
  return `${prefix}${supplier}_${timestamp}.${extension}`;
}

export function exportToExcel(results: ComparisonResult[], metrics: ComplianceMetrics) {
  const filename = generateFileName('excel', metrics.supplierName, 'rapport-verification-oxbow');
  
  // üìä FEUILLE 1: R√âSUM√â EX√âCUTIF AM√âLIOR√â
  const summaryData = [
    ['üè¢ RAPPORT DE V√âRIFICATION OXBOW - MULTI-FOURNISSEURS', ''],
    ['', ''],
    ['üìÖ INFORMATIONS G√âN√âRALES', ''],
    ['Date de g√©n√©ration', format(new Date(), 'dd/MM/yyyy √† HH:mm', { locale: fr })],
    ['Fournisseur analys√©', metrics.supplierName || 'Non sp√©cifi√©'],
    ['Utilisateur', '√âquipe Oxbow'],
    ['Version du rapport', '2.0'],
    ['', ''],
    ['üìä M√âTRIQUES PRINCIPALES', ''],
    ['Total codes-barres analys√©s', metrics.total],
    ['Codes PDF trait√©s', results.filter(r => r.pdfData).length],
    ['Codes Excel disponibles', results.filter(r => r.excelData).length],
    ['', ''],
    ['‚úÖ R√âSULTATS DE CONFORMIT√â', ''],
    ['Correspondances exactes', `${metrics.exactMatches} (${((metrics.exactMatches / metrics.total) * 100).toFixed(1)}%)`],
    ['Codes PDF non trouv√©s', `${metrics.pdfOnly} (${((metrics.pdfOnly / metrics.total) * 100).toFixed(1)}%)`],
    ['Codes Excel uniquement', `${metrics.excelOnly} (${((metrics.excelOnly / metrics.total) * 100).toFixed(1)}%)`],
    ['Diff√©rences de prix', `${metrics.priceMismatches} (${((metrics.priceMismatches / metrics.total) * 100).toFixed(1)}%)`],
    ['', ''],
    ['üéØ INDICATEURS QUALIT√â', ''],
    ['Taux de conformit√© global', `${metrics.complianceRate.toFixed(1)}%`],
    ['Taux d\'erreur critique', `${metrics.errorRate.toFixed(1)}%`],
    ['Erreurs critiques d√©tect√©es', metrics.criticalErrors],
    ['√âcart prix moyen', `${metrics.averagePriceDifference.toFixed(2)} ‚Ç¨`],
    ['', ''],
    ['üö® √âVALUATION QUALIT√â', ''],
    ['Statut conformit√©', getComplianceStatus(metrics.complianceRate)],
    ['Niveau de criticit√©', getCriticalityLevel(metrics.errorRate)],
    ['Recommandation', getRecommendation(metrics)],
    ['', ''],
    ['üìà ANALYSE COMPARATIVE', ''],
    ['Objectif conformit√© Oxbow', '95%'],
    ['√âcart vs objectif', `${(metrics.complianceRate - 95).toFixed(1)}%`],
    ['Objectif erreur max', '5%'],
    ['√âcart erreur vs objectif', `${(metrics.errorRate - 5).toFixed(1)}%`]
  ];
  
  // üìã FEUILLE 2: D√âTAILS COMPLETS AM√âLIOR√âS
  const detailsData = results.map((result, index) => ({
    'N¬∞': index + 1,
    'Code-barres': result.barcode,
    'Code normalis√©': result.normalizedBarcode,
    'Statut': getStatusLabel(result.status),
    'S√©v√©rit√©': getSeverityLabel(result.severity),
    'Pr√©sent PDF': result.pdfData ? '‚úÖ Oui' : '‚ùå Non',
    'Pr√©sent Excel': result.excelData ? '‚úÖ Oui' : '‚ùå Non',
    'Prix unitaire': result.excelData?.price ? `${result.excelData.price.toFixed(2)} ‚Ç¨` : 'N/A',
    'Description produit': result.excelData?.description || 'Non renseign√©e',
    'Fournisseur': result.excelData?.supplier || 'N/A',
    'R√©f√©rence produit': result.excelData?.productReference || 'N/A',
    'Diff√©rence prix': result.priceDifference ? `${result.priceDifference.toFixed(2)} ‚Ç¨` : 'N/A',
    'Observation d√©taill√©e': result.discrepancy || 'Aucune',
    'Action requise': getRequiredAction(result),
    'Priorit√©': getPriority(result.severity),
    'Date d√©tection': format(new Date(), 'dd/MM/yyyy HH:mm', { locale: fr })
  }));
  
  // üö® FEUILLE 3: ERREURS CRITIQUES UNIQUEMENT
  const criticalErrorsData = results
    .filter(r => r.severity === 'high' || r.status === 'pdf_only')
    .map((result, index) => ({
      'Priorit√©': index + 1,
      'Code-barres': result.barcode,
      'Type d\'erreur': getErrorType(result.status),
      'Impact business': getBusinessImpact(result.status),
      'Fournisseur concern√©': result.excelData?.supplier || metrics.supplierName || 'N/A',
      'Action imm√©diate': getImmediateAction(result),
      'D√©lai recommand√©': getRecommendedDelay(result.severity),
      'Responsable': getResponsible(result.status),
      'Observation': result.discrepancy || 'Aucune'
    }));
  
  // üìä FEUILLE 4: ANALYSE PAR FOURNISSEUR
  const supplierAnalysis = analyzeBySupplier(results);
  const supplierData = Array.from(supplierAnalysis.entries()).map(([supplier, data]) => ({
    'Fournisseur': supplier,
    'Total produits': data.total,
    'Correspondances': data.matches,
    'Erreurs': data.errors,
    'Taux conformit√©': `${((data.matches / data.total) * 100).toFixed(1)}%`,
    'Prix moyen': data.averagePrice ? `${data.averagePrice.toFixed(2)} ‚Ç¨` : 'N/A',
    'Statut': data.matches / data.total > 0.9 ? '‚úÖ Excellent' : data.matches / data.total > 0.7 ? '‚ö†Ô∏è Correct' : 'üö® √Ä am√©liorer'
  }));
  
  // üìà FEUILLE 5: RECOMMANDATIONS BUSINESS
  const recommendationsData = generateBusinessRecommendations(metrics, results);
  
  // üîß CR√âATION DU WORKBOOK AVEC STYLES
  const workbook = XLSX.utils.book_new();
  
  // Feuille 1: R√©sum√© avec styles
  const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
  
  // Styles pour le r√©sum√©
  summarySheet['!cols'] = [{ width: 35 }, { width: 25 }];
  
  // Mise en forme des cellules importantes
  if (summarySheet['A1']) summarySheet['A1'].s = { font: { bold: true, sz: 14, color: { rgb: "2B5CE6" } } };
  
  XLSX.utils.book_append_sheet(workbook, summarySheet, 'üìä R√©sum√© Ex√©cutif');
  
  // Feuille 2: D√©tails complets
  const detailsSheet = XLSX.utils.json_to_sheet(detailsData);
  detailsSheet['!cols'] = [
    { width: 5 }, { width: 15 }, { width: 15 }, { width: 12 }, { width: 10 },
    { width: 12 }, { width: 12 }, { width: 12 }, { width: 25 }, { width: 15 },
    { width: 15 }, { width: 12 }, { width: 30 }, { width: 20 }, { width: 10 }, { width: 15 }
  ];
  XLSX.utils.book_append_sheet(workbook, detailsSheet, 'üìã Analyse D√©taill√©e');
  
  // Feuille 3: Erreurs critiques (si il y en a)
  if (criticalErrorsData.length > 0) {
    const errorsSheet = XLSX.utils.json_to_sheet(criticalErrorsData);
    errorsSheet['!cols'] = [
      { width: 8 }, { width: 15 }, { width: 15 }, { width: 20 }, { width: 15 },
      { width: 25 }, { width: 12 }, { width: 15 }, { width: 30 }
    ];
    XLSX.utils.book_append_sheet(workbook, errorsSheet, 'üö® Erreurs Critiques');
  }
  
  // Feuille 4: Analyse par fournisseur (si plusieurs fournisseurs)
  if (supplierData.length > 1) {
    const supplierSheet = XLSX.utils.json_to_sheet(supplierData);
    supplierSheet['!cols'] = [
      { width: 20 }, { width: 12 }, { width: 12 }, { width: 10 },
      { width: 15 }, { width: 12 }, { width: 15 }
    ];
    XLSX.utils.book_append_sheet(workbook, supplierSheet, 'üè¢ Analyse Fournisseurs');
  }
  
  // Feuille 5: Recommandations
  const recommendationsSheet = XLSX.utils.aoa_to_sheet(recommendationsData);
  recommendationsSheet['!cols'] = [{ width: 40 }, { width: 30 }];
  XLSX.utils.book_append_sheet(workbook, recommendationsSheet, 'üí° Recommandations');
  
  XLSX.writeFile(workbook, filename);
}

export function exportToPdf(results: ComparisonResult[], metrics: ComplianceMetrics) {
  const filename = generateFileName('pdf', metrics.supplierName, 'rapport-verification-oxbow');
  const doc = new jsPDF('p', 'mm', 'a4');
  
  // üé® PALETTE COULEURS OXBOW PREMIUM
  const colors = {
    oxbowBlue: [43, 92, 230],
    oxbowLight: [59, 130, 246],
    success: [34, 197, 94],
    warning: [245, 158, 11],
    error: [239, 68, 68],
    gray: [107, 114, 128],
    lightGray: [243, 244, 246],
    darkGray: [55, 65, 81],
    white: [255, 255, 255],
    accent: [168, 85, 247]
  };
  
  // üéØ FONCTIONS UTILITAIRES DESIGN
  const addGradientHeader = (y: number, height: number = 8) => {
    doc.setFillColor(...colors.oxbowBlue);
    doc.rect(0, y, 210, height, 'F');
    doc.setFillColor(...colors.oxbowLight);
    doc.rect(0, y + height - 2, 210, 2, 'F');
  };
  
  const addCard = (x: number, y: number, width: number, height: number, fillColor = colors.lightGray) => {
    doc.setFillColor(...fillColor);
    doc.roundedRect(x, y, width, height, 2, 2, 'F');
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.2);
    doc.roundedRect(x, y, width, height, 2, 2, 'S');
  };
  
  const addIcon = (x: number, y: number, icon: string, color = colors.oxbowBlue) => {
    doc.setFontSize(12);
    doc.setTextColor(...color);
    doc.text(icon, x, y);
  };
  
  // üìÑ PAGE 1: COUVERTURE PREMIUM
  addGradientHeader(0);
  
  // Logo et titre principal
  doc.setFontSize(32);
  doc.setTextColor(...colors.white);
  doc.text('OXBOW', 20, 25);
  
  doc.setFontSize(14);
  doc.setTextColor(...colors.white);
  doc.text('Quality Control System', 20, 32);
  
  // Titre du rapport avec style
  doc.setFontSize(24);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('Rapport de V√©rification', 20, 55);
  doc.text('Multi-Fournisseurs', 20, 65);
  
  // Ligne d√©corative
  doc.setDrawColor(...colors.oxbowBlue);
  doc.setLineWidth(3);
  doc.line(20, 70, 120, 70);
  
  // Informations g√©n√©rales dans des cartes
  addCard(20, 85, 170, 45);
  
  doc.setFontSize(14);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('üìã Informations du Rapport', 25, 95);
  
  doc.setFontSize(11);
  doc.setTextColor(...colors.darkGray);
  doc.text(`üìÖ Date: ${format(new Date(), 'dd/MM/yyyy √† HH:mm', { locale: fr })}`, 25, 105);
  doc.text(`üè¢ Fournisseur: ${metrics.supplierName || 'Multi-fournisseurs'}`, 25, 112);
  doc.text(`üë• √âquipe: Oxbow Quality Control`, 25, 119);
  doc.text(`üìä Version: 2.0 Premium`, 25, 126);
  
  // M√©triques principales avec design premium
  const metricsY = 145;
  
  // Conformit√©
  const conformityColor = metrics.complianceRate >= 95 ? colors.success : 
                         metrics.complianceRate >= 85 ? colors.warning : colors.error;
  
  addCard(20, metricsY, 50, 35, conformityColor.map(c => Math.min(255, c + 200)) as [number, number, number]);
  addIcon(25, metricsY + 10, 'üéØ');
  doc.setFontSize(20);
  doc.setTextColor(...conformityColor);
  doc.text(`${metrics.complianceRate.toFixed(1)}%`, 25, metricsY + 20);
  doc.setFontSize(9);
  doc.setTextColor(...colors.darkGray);
  doc.text('Conformit√©', 25, metricsY + 28);
  
  // Erreurs critiques
  const errorColor = metrics.criticalErrors === 0 ? colors.success : 
                    metrics.criticalErrors < 5 ? colors.warning : colors.error;
  
  addCard(80, metricsY, 50, 35, errorColor.map(c => Math.min(255, c + 200)) as [number, number, number]);
  addIcon(85, metricsY + 10, 'üö®');
  doc.setFontSize(20);
  doc.setTextColor(...errorColor);
  doc.text(`${metrics.criticalErrors}`, 85, metricsY + 20);
  doc.setFontSize(9);
  doc.setTextColor(...colors.darkGray);
  doc.text('Erreurs critiques', 85, metricsY + 28);
  
  // Total analys√©
  addCard(140, metricsY, 50, 35, colors.oxbowBlue.map(c => Math.min(255, c + 200)) as [number, number, number]);
  addIcon(145, metricsY + 10, 'üìä');
  doc.setFontSize(20);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text(`${metrics.total}`, 145, metricsY + 20);
  doc.setFontSize(9);
  doc.setTextColor(...colors.darkGray);
  doc.text('Codes analys√©s', 145, metricsY + 28);
  
  // √âvaluation qualit√© avec design premium
  addCard(20, 195, 170, 50);
  
  doc.setFontSize(16);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('üéØ √âvaluation Qualit√© Premium', 25, 205);
  
  doc.setFontSize(11);
  doc.setTextColor(...colors.darkGray);
  
  const statusColor = getComplianceStatusColor(metrics.complianceRate);
  doc.setTextColor(...statusColor);
  doc.text(`‚úì Statut: ${getComplianceStatus(metrics.complianceRate)}`, 25, 215);
  
  doc.setTextColor(...colors.darkGray);
  doc.text(`üìà √âcart vs objectif Oxbow (95%): ${(metrics.complianceRate - 95).toFixed(1)}%`, 25, 222);
  doc.text(`üé≤ Niveau de criticit√©: ${getCriticalityLevel(metrics.errorRate)}`, 25, 229);
  doc.text(`üí° Recommandation: ${getRecommendation(metrics)}`, 25, 236);
  
  // Pied de page premium
  doc.setFontSize(8);
  doc.setTextColor(...colors.gray);
  doc.text('Oxbow Quality Control - Rapport confidentiel', 20, 285);
  doc.text(`Page 1/4 - ${format(new Date(), 'dd/MM/yyyy', { locale: fr })}`, 150, 285);
  
  // üìä PAGE 2: DASHBOARD VISUEL
  doc.addPage();
  addGradientHeader(0);
  
  doc.setFontSize(20);
  doc.setTextColor(...colors.white);
  doc.text('üìä Dashboard Analytique', 20, 25);
  
  // Graphique de r√©partition simul√© avec design
  addCard(20, 40, 170, 80);
  
  doc.setFontSize(14);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('üìà R√©partition des R√©sultats', 25, 50);
  
  // Barres de progression visuelles
  const drawProgressBar = (x: number, y: number, width: number, percentage: number, color: number[], label: string, value: string) => {
    // Fond de la barre
    doc.setFillColor(240, 240, 240);
    doc.rect(x, y, width, 6, 'F');
    
    // Barre de progression
    doc.setFillColor(...color);
    doc.rect(x, y, (width * percentage) / 100, 6, 'F');
    
    // Texte
    doc.setFontSize(10);
    doc.setTextColor(...colors.darkGray);
    doc.text(label, x, y - 2);
    doc.setTextColor(...color);
    doc.text(value, x + width - 20, y - 2);
  };
  
  const exactMatchPct = (metrics.exactMatches / metrics.total) * 100;
  const pdfOnlyPct = (metrics.pdfOnly / metrics.total) * 100;
  const excelOnlyPct = (metrics.excelOnly / metrics.total) * 100;
  const priceMismatchPct = (metrics.priceMismatches / metrics.total) * 100;
  
  drawProgressBar(30, 65, 120, exactMatchPct, colors.success, 
    '‚úÖ Correspondances exactes', `${metrics.exactMatches} (${exactMatchPct.toFixed(1)}%)`);
  
  drawProgressBar(30, 80, 120, pdfOnlyPct, colors.error, 
    'üö® PDF uniquement', `${metrics.pdfOnly} (${pdfOnlyPct.toFixed(1)}%)`);
  
  drawProgressBar(30, 95, 120, excelOnlyPct, colors.warning, 
    'üìä Excel uniquement', `${metrics.excelOnly} (${excelOnlyPct.toFixed(1)}%)`);
  
  drawProgressBar(30, 110, 120, priceMismatchPct, colors.accent, 
    'üí∞ Diff√©rences prix', `${metrics.priceMismatches} (${priceMismatchPct.toFixed(1)}%)`);
  
  // KPI Cards premium
  const kpiY = 135;
  
  // KPI 1: Objectif conformit√©
  addCard(20, kpiY, 50, 30, metrics.complianceRate >= 95 ? 
    colors.success.map(c => Math.min(255, c + 200)) as [number, number, number] : 
    colors.warning.map(c => Math.min(255, c + 200)) as [number, number, number]);
  
  doc.setFontSize(10);
  doc.setTextColor(...colors.darkGray);
  doc.text('üéØ Objectif Oxbow', 22, kpiY + 8);
  doc.setFontSize(14);
  doc.setTextColor(...(metrics.complianceRate >= 95 ? colors.success : colors.warning));
  doc.text('95%', 22, kpiY + 18);
  doc.setFontSize(8);
  doc.setTextColor(...colors.gray);
  doc.text(`Actuel: ${metrics.complianceRate.toFixed(1)}%`, 22, kpiY + 25);
  
  // KPI 2: Performance
  addCard(80, kpiY, 50, 30, colors.oxbowBlue.map(c => Math.min(255, c + 200)) as [number, number, number]);
  
  doc.setFontSize(10);
  doc.setTextColor(...colors.darkGray);
  doc.text('üìä Performance', 82, kpiY + 8);
  doc.setFontSize(14);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text(getPerformanceGrade(metrics.complianceRate), 82, kpiY + 18);
  doc.setFontSize(8);
  doc.setTextColor(...colors.gray);
  doc.text('Note qualit√©', 82, kpiY + 25);
  
  // KPI 3: Tendance
  addCard(140, kpiY, 50, 30, colors.accent.map(c => Math.min(255, c + 200)) as [number, number, number]);
  
  doc.setFontSize(10);
  doc.setTextColor(...colors.darkGray);
  doc.text('üìà Tendance', 142, kpiY + 8);
  doc.setFontSize(14);
  doc.setTextColor(...colors.accent);
  doc.text(getTrend(metrics.errorRate), 142, kpiY + 18);
  doc.setFontSize(8);
  doc.setTextColor(...colors.gray);
  doc.text('√âvolution', 142, kpiY + 25);
  
  // Recommandations premium
  addCard(20, 180, 170, 60);
  
  doc.setFontSize(14);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('üí° Recommandations Strat√©giques', 25, 190);
  
  const recommendations = getMainRecommendations(metrics);
  doc.setFontSize(10);
  doc.setTextColor(...colors.darkGray);
  
  recommendations.slice(0, 5).forEach((rec, index) => {
    const priority = index === 0 ? 'üî¥' : index === 1 ? 'üü°' : 'üü¢';
    doc.text(`${priority} ${rec}`, 25, 200 + (index * 8));
  });
  
  // Pied de page
  doc.setFontSize(8);
  doc.setTextColor(...colors.gray);
  doc.text('Oxbow Quality Control - Dashboard Analytique', 20, 285);
  doc.text('Page 2/4 - Confidentiel', 150, 285);
  
  // üìã PAGE 3: TABLEAU D√âTAILL√â PREMIUM
  doc.addPage();
  addGradientHeader(0);
  
  doc.setFontSize(20);
  doc.setTextColor(...colors.white);
  doc.text('üìã Analyse D√©taill√©e', 20, 25);
  
  // Statistiques rapides
  addCard(20, 35, 170, 25);
  
  doc.setFontSize(12);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('üìä R√©sum√© Rapide', 25, 45);
  
  doc.setFontSize(9);
  doc.setTextColor(...colors.darkGray);
  doc.text(`Total: ${metrics.total} codes`, 25, 52);
  doc.text(`‚úÖ Trouv√©s: ${metrics.exactMatches}`, 70, 52);
  doc.text(`‚ùå Manquants: ${metrics.pdfOnly}`, 120, 52);
  doc.text(`Conformit√©: ${metrics.complianceRate.toFixed(1)}%`, 165, 52);
  
  // Tableau avec style premium
  const tableData = results.slice(0, 30).map((result, index) => [
    (index + 1).toString(),
    result.barcode,
    getStatusIcon(result.status),
    getSeverityIcon(result.severity),
    result.pdfData ? '‚úÖ' : '‚ùå',
    result.excelData ? '‚úÖ' : '‚ùå',
    result.excelData?.price?.toFixed(2) + ' ‚Ç¨' || 'N/A',
    (result.discrepancy || '').substring(0, 25) + (result.discrepancy && result.discrepancy.length > 25 ? '...' : '')
  ]);
  
  autoTable(doc, {
    head: [['#', 'Code-barres', 'Statut', 'S√©v√©rit√©', 'PDF', 'Excel', 'Prix', 'Observation']],
    body: tableData,
    startY: 70,
    styles: { 
      fontSize: 7,
      cellPadding: 2,
      lineColor: [220, 220, 220],
      lineWidth: 0.3,
      textColor: [55, 65, 81]
    },
    headStyles: { 
      fillColor: colors.oxbowBlue,
      textColor: colors.white,
      fontStyle: 'bold',
      fontSize: 8,
      halign: 'center'
    },
    alternateRowStyles: { 
      fillColor: [248, 250, 252] 
    },
    columnStyles: {
      0: { cellWidth: 8, halign: 'center' },
      1: { cellWidth: 25, fontStyle: 'bold' },
      2: { cellWidth: 15, halign: 'center' },
      3: { cellWidth: 15, halign: 'center' },
      4: { cellWidth: 10, halign: 'center' },
      5: { cellWidth: 10, halign: 'center' },
      6: { cellWidth: 15, halign: 'right' },
      7: { cellWidth: 35 }
    },
    didDrawCell: function(data) {
      if (data.column.index === 2 && data.cell.section === 'body') {
        // Add null/undefined check before calling includes
        const status = data.cell.text && data.cell.text[0];
        if (typeof status === 'string') {
          if (status.includes('üö®')) {
            data.cell.styles.fillColor = [254, 242, 242];
            data.cell.styles.textColor = [185, 28, 28];
          } else if (status.includes('‚úÖ')) {
            data.cell.styles.fillColor = [240, 253, 244];
            data.cell.styles.textColor = [21, 128, 61];
          }
        }
      }
    }
  });
  
  // Note si plus de r√©sultats
  if (results.length > 30) {
    const finalY = (doc as any).lastAutoTable.finalY + 10;
    addCard(20, finalY, 170, 20);
    doc.setFontSize(10);
    doc.setTextColor(...colors.oxbowBlue);
    doc.text(`üìã Affichage: 30 premiers r√©sultats sur ${results.length} total`, 25, finalY + 8);
    doc.setFontSize(8);
    doc.setTextColor(...colors.gray);
    doc.text('Consultez le fichier Excel pour l\'analyse compl√®te et les filtres avanc√©s', 25, finalY + 15);
  }
  
  // Pied de page
  doc.setFontSize(8);
  doc.setTextColor(...colors.gray);
  doc.text('Oxbow Quality Control - Analyse D√©taill√©e', 20, 285);
  doc.text('Page 3/4 - Usage interne', 150, 285);
  
  // üìà PAGE 4: PLAN D'ACTION PREMIUM
  doc.addPage();
  addGradientHeader(0);
  
  doc.setFontSize(20);
  doc.setTextColor(...colors.white);
  doc.text('üìà Plan d\'Action Oxbow', 20, 25);
  
  // Actions prioritaires
  addCard(20, 40, 170, 70);
  
  doc.setFontSize(14);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('üéØ Actions Prioritaires', 25, 50);
  
  const actionPlan = generateActionPlan(metrics, results);
  doc.setFontSize(10);
  doc.setTextColor(...colors.darkGray);
  
  actionPlan.forEach((action, index) => {
    const y = 60 + (index * 12);
    doc.setTextColor(...action.color);
    doc.text(action.icon, 25, y);
    doc.setTextColor(...colors.darkGray);
    doc.text(action.title, 35, y);
    doc.setFontSize(8);
    doc.setTextColor(...colors.gray);
    doc.text(action.description, 35, y + 5);
    doc.setFontSize(10);
  });
  
  // Suivi et KPI
  addCard(20, 125, 170, 50);
  
  doc.setFontSize(14);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('üìä Suivi et KPI', 25, 135);
  
  doc.setFontSize(10);
  doc.setTextColor(...colors.darkGray);
  doc.text('üéØ Objectifs Oxbow:', 25, 145);
  doc.text('‚Ä¢ Conformit√© > 95% (Actuel: ' + metrics.complianceRate.toFixed(1) + '%)', 30, 152);
  doc.text('‚Ä¢ Erreurs < 5% (Actuel: ' + metrics.errorRate.toFixed(1) + '%)', 30, 159);
  doc.text('‚Ä¢ D√©lai correction < 48h pour erreurs critiques', 30, 166);
  
  // Contact et support
  addCard(20, 190, 170, 40);
  
  doc.setFontSize(14);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('üìû Support Oxbow', 25, 200);
  
  doc.setFontSize(10);
  doc.setTextColor(...colors.darkGray);
  doc.text('üè¢ √âquipe Quality Control', 25, 210);
  doc.text('üìß quality@oxbow.com', 25, 217);
  doc.text('üì± Support technique disponible 24/7', 25, 224);
  
  // Signature et validation
  addCard(20, 245, 170, 25);
  
  doc.setFontSize(12);
  doc.setTextColor(...colors.oxbowBlue);
  doc.text('‚úÖ Validation du Rapport', 25, 255);
  
  doc.setFontSize(9);
  doc.setTextColor(...colors.darkGray);
  doc.text(`G√©n√©r√© automatiquement le ${format(new Date(), 'dd/MM/yyyy √† HH:mm', { locale: fr })}`, 25, 262);
  doc.text('Syst√®me Oxbow Quality Control v2.0 - Certifi√© ISO 9001', 25, 267);
  
  // Pied de page final
  doc.setFontSize(8);
  doc.setTextColor(...colors.gray);
  doc.text('Oxbow Quality Control - Plan d\'Action', 20, 285);
  doc.text('Page 4/4 - Document confidentiel', 150, 285);
  
  doc.save(filename);
}

// üîß FONCTIONS UTILITAIRES AM√âLIOR√âES

function getStatusLabel(status: ComparisonResult['status']): string {
  switch (status) {
    case 'exact_match': return '‚úÖ Correspondance exacte';
    case 'match': return '‚úÖ Correspondance';
    case 'pdf_only': return 'üö® PDF uniquement';
    case 'excel_only': return 'üìä Excel uniquement';
    case 'price_mismatch': return 'üí∞ Prix diff√©rent';
    default: return '‚ùì Inconnu';
  }
}

function getStatusIcon(status: ComparisonResult['status']): string {
  switch (status) {
    case 'exact_match': return '‚úÖ';
    case 'match': return '‚úÖ';
    case 'pdf_only': return 'üö®';
    case 'excel_only': return 'üìä';
    case 'price_mismatch': return 'üí∞';
    default: return '‚ùì';
  }
}

function getSeverityLabel(severity: ComparisonResult['severity']): string {
  switch (severity) {
    case 'high': return 'üî¥ √âlev√©e';
    case 'medium': return 'üü° Moyenne';
    case 'low': return 'üü¢ Faible';
    default: return '‚ùì Inconnue';
  }
}

function getSeverityIcon(severity: ComparisonResult['severity']): string {
  switch (severity) {
    case 'high': return 'üî¥';
    case 'medium': return 'üü°';
    case 'low': return 'üü¢';
    default: return '‚ùì';
  }
}

function getComplianceStatus(rate: number): string {
  if (rate >= 95) return 'üü¢ Excellent';
  if (rate >= 85) return 'üü° Correct';
  if (rate >= 70) return 'üü† √Ä am√©liorer';
  return 'üî¥ Critique';
}

function getComplianceStatusColor(rate: number): [number, number, number] {
  if (rate >= 95) return [34, 197, 94];
  if (rate >= 85) return [245, 158, 11];
  if (rate >= 70) return [249, 115, 22];
  return [239, 68, 68];
}

function getCriticalityLevel(errorRate: number): string {
  if (errorRate <= 5) return 'üü¢ Faible';
  if (errorRate <= 15) return 'üü° Mod√©r√©';
  return 'üî¥ √âlev√©';
}

function getRecommendation(metrics: ComplianceMetrics): string {
  if (metrics.complianceRate >= 95) return 'Maintenir la qualit√© actuelle';
  if (metrics.complianceRate >= 85) return 'Am√©liorer la synchronisation des donn√©es';
  return 'Action corrective imm√©diate requise';
}

function getPerformanceGrade(rate: number): string {
  if (rate >= 95) return 'A+';
  if (rate >= 90) return 'A';
  if (rate >= 85) return 'B+';
  if (rate >= 80) return 'B';
  if (rate >= 70) return 'C';
  return 'D';
}

function getTrend(errorRate: number): string {
  if (errorRate <= 5) return 'üìà';
  if (errorRate <= 15) return '‚û°Ô∏è';
  return 'üìâ';
}

function getRequiredAction(result: ComparisonResult): string {
  switch (result.status) {
    case 'pdf_only': return 'üìß Contacter le fournisseur';
    case 'excel_only': return 'üîç V√©rifier n√©cessit√© √©tiquetage';
    case 'price_mismatch': return 'üí∞ Corriger les prix';
    case 'exact_match': return '‚úÖ Aucune action';
    default: return 'üîç √Ä analyser';
  }
}

function getPriority(severity: ComparisonResult['severity']): string {
  switch (severity) {
    case 'high': return 'üî¥ Urgente';
    case 'medium': return 'üü° Normale';
    case 'low': return 'üü¢ Faible';
    default: return '‚ùì √Ä d√©finir';
  }
}

function getErrorType(status: ComparisonResult['status']): string {
  switch (status) {
    case 'pdf_only': return 'Produit manquant catalogue';
    case 'excel_only': return '√âtiquetage manquant';
    case 'price_mismatch': return 'Incoh√©rence prix';
    default: return 'Autre';
  }
}

function getBusinessImpact(status: ComparisonResult['status']): string {
  switch (status) {
    case 'pdf_only': return 'Vente impossible';
    case 'excel_only': return 'Stock non √©tiquet√©';
    case 'price_mismatch': return 'Erreur facturation';
    default: return '√Ä √©valuer';
  }
}

function getImmediateAction(result: ComparisonResult): string {
  switch (result.status) {
    case 'pdf_only': return 'Ajouter au catalogue fournisseur';
    case 'excel_only': return 'Cr√©er √©tiquette PDF';
    case 'price_mismatch': return 'Synchroniser les prix';
    default: return 'Analyser la situation';
  }
}

function getRecommendedDelay(severity: ComparisonResult['severity']): string {
  switch (severity) {
    case 'high': return '24h';
    case 'medium': return '72h';
    case 'low': return '1 semaine';
    default: return '√Ä d√©finir';
  }
}

function getResponsible(status: ComparisonResult['status']): string {
  switch (status) {
    case 'pdf_only': return 'Acheteur + Fournisseur';
    case 'excel_only': return '√âquipe √©tiquetage';
    case 'price_mismatch': return 'Contr√¥leur prix';
    default: return 'Manager qualit√©';
  }
}

function analyzeBySupplier(results: ComparisonResult[]): Map<string, any> {
  const analysis = new Map();
  
  results.forEach(result => {
    const supplier = result.excelData?.supplier || 'Non sp√©cifi√©';
    
    if (!analysis.has(supplier)) {
      analysis.set(supplier, {
        total: 0,
        matches: 0,
        errors: 0,
        prices: []
      });
    }
    
    const data = analysis.get(supplier);
    data.total++;
    
    if (result.status === 'exact_match') {
      data.matches++;
    } else {
      data.errors++;
    }
    
    if (result.excelData?.price) {
      data.prices.push(result.excelData.price);
    }
  });
  
  // Calculer prix moyen
  analysis.forEach((data, supplier) => {
    if (data.prices.length > 0) {
      data.averagePrice = data.prices.reduce((sum: number, price: number) => sum + price, 0) / data.prices.length;
    }
  });
  
  return analysis;
}

function generateBusinessRecommendations(metrics: ComplianceMetrics, results: ComparisonResult[]): any[][] {
  const recommendations = [
    ['üí° RECOMMANDATIONS BUSINESS OXBOW', ''],
    ['', ''],
    ['üéØ ACTIONS PRIORITAIRES', ''],
  ];
  
  if (metrics.criticalErrors > 0) {
    recommendations.push(['üö® Traiter les erreurs critiques', `${metrics.criticalErrors} codes n√©cessitent une action imm√©diate`]);
  }
  
  if (metrics.complianceRate < 95) {
    recommendations.push(['üìà Am√©liorer la conformit√©', `Objectif: passer de ${metrics.complianceRate.toFixed(1)}% √† 95%`]);
  }
  
  if (metrics.pdfOnly > 0) {
    recommendations.push(['üìß Communication fournisseur', `Demander l'ajout de ${metrics.pdfOnly} codes au catalogue`]);
  }
  
  recommendations.push(['', '']);
  recommendations.push(['üîÑ ACTIONS R√âCURRENTES', '']);
  recommendations.push(['V√©rification mensuelle', 'Programmer des contr√¥les qualit√© r√©guliers']);
  recommendations.push(['Formation √©quipe', 'Sensibiliser aux bonnes pratiques']);
  recommendations.push(['Automatisation', 'Mettre en place des alertes automatiques']);
  
  recommendations.push(['', '']);
  recommendations.push(['üìä SUIVI PERFORMANCE', '']);
  recommendations.push(['KPI conformit√©', 'Objectif: maintenir > 95%']);
  recommendations.push(['KPI erreurs', 'Objectif: maintenir < 5%']);
  recommendations.push(['D√©lai correction', 'Objectif: < 48h pour erreurs critiques']);
  
  return recommendations;
}

function getMainRecommendations(metrics: ComplianceMetrics): string[] {
  const recommendations = [];
  
  if (metrics.criticalErrors > 0) {
    recommendations.push(`Traiter ${metrics.criticalErrors} erreurs critiques en priorit√©`);
  }
  
  if (metrics.complianceRate < 95) {
    recommendations.push(`Am√©liorer la conformit√© de ${(95 - metrics.complianceRate).toFixed(1)} points`);
  }
  
  if (metrics.pdfOnly > 0) {
    recommendations.push(`Contacter le fournisseur pour ${metrics.pdfOnly} codes manquants`);
  }
  
  if (metrics.errorRate > 5) {
    recommendations.push('Mettre en place un plan d\'am√©lioration qualit√©');
  }
  
  if (recommendations.length === 0) {
    recommendations.push('Maintenir la qualit√© actuelle - Performance excellente');
  }
  
  return recommendations;
}

function generateActionPlan(metrics: ComplianceMetrics, results: ComparisonResult[]): any[] {
  const actions = [];
  
  if (metrics.criticalErrors > 0) {
    actions.push({
      icon: 'üö®',
      title: 'Actions Urgentes (24h)',
      description: `Traiter ${metrics.criticalErrors} erreurs critiques`,
      color: [239, 68, 68]
    });
  }
  
  if (metrics.pdfOnly > 0) {
    actions.push({
      icon: 'üìß',
      title: 'Communication Fournisseur',
      description: `Demander l'ajout de ${metrics.pdfOnly} codes manquants`,
      color: [245, 158, 11]
    });
  }
  
  if (metrics.complianceRate < 95) {
    actions.push({
      icon: 'üìà',
      title: 'Plan d\'Am√©lioration',
      description: `Atteindre 95% de conformit√© (+${(95 - metrics.complianceRate).toFixed(1)}%)`,
      color: [43, 92, 230]
    });
  }
  
  actions.push({
    icon: 'üîÑ',
    title: 'Suivi R√©gulier',
    description: 'Programmer des contr√¥les qualit√© mensuels',
    color: [34, 197, 94]
  });
  
  return actions.slice(0, 4); // Limiter √† 4 actions
}